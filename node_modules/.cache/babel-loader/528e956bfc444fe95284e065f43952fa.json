{"ast":null,"code":"import axios from \"axios\"; // grab the api url from env variables\n\nconst API_URL = `${process.env.REACT_APP_API_URL}`;\nconsole.log(API_URL);\nconst LOCAL_STORAGE_KEY = `${process.env.REACT_APP_STORAGE_KEY}`; // we communicate with JSON\n\nconst DEFAULT_HEADERS = {\n  \"content-type\": \"application/json\"\n}; // on each request we need to send auth headers\n\naxios.interceptors.request.use(config => {\n  const {\n    accessToken,\n    clientToken,\n    userToken\n  } = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || {};\n  Object.assign(config.headers.common, {\n    \"token-type\": \"Bearer\",\n    \"access-token\": accessToken,\n    client: clientToken,\n    uid: userToken\n  });\n  return config;\n}, error => Promise.reject(error));\n/**\n * on each response we need to grab the auth headers\n * and persist it to a local storage\n */\n\naxios.interceptors.response.use(response => {\n  const accessToken = response.headers[\"access-token\"];\n  const clientToken = response.headers[\"client\"];\n  const userToken = response.headers[\"uid\"];\n\n  if (accessToken) {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify({\n      accessToken,\n      clientToken,\n      userToken\n    }));\n  }\n\n  return response;\n}, error => Promise.reject(error));\n/**\n *  helper method to perform an api requests\n *\n * @param path\n * @param method\n * @param data\n * @param headers\n * @returns {Promise<*>}\n */\n\nexport const apiRequest = async ({\n  path,\n  method = \"GET\",\n  data,\n  headers = {}\n}) => {\n  try {\n    console.log(API_URL);\n    const response = await axios({\n      url: API_URL + path,\n      method,\n      data: data || {},\n      headers: Object.assign({}, DEFAULT_HEADERS, headers)\n    });\n    return response;\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["/Users/andresmontero/Desktop/UNI/betOven/myExample/log-nav copy/log-nav/src/services/api.js"],"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","LOCAL_STORAGE_KEY","REACT_APP_STORAGE_KEY","DEFAULT_HEADERS","interceptors","request","use","config","accessToken","clientToken","userToken","JSON","parse","localStorage","getItem","Object","assign","headers","common","client","uid","error","Promise","reject","response","setItem","stringify","apiRequest","path","method","data","url"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAGA;;AACA,MAAMC,OAAO,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAAjD;AACAC,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,MAAMM,iBAAiB,GAAI,GAAEL,OAAO,CAACC,GAAR,CAAYK,qBAAsB,EAA/D,C,CAEA;;AACA,MAAMC,eAAe,GAAG;AACtB,kBAAgB;AADM,CAAxB,C,CAIA;;AACAT,KAAK,CAACU,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACIC,MAAM,IAAI;AACR,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA;AAA5B,MACNC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBb,iBAArB,CAAX,KAAuD,EADvD;AAGAc,EAAAA,MAAM,CAACC,MAAP,CAAcT,MAAM,CAACU,OAAP,CAAeC,MAA7B,EAAqC;AACnC,kBAAc,QADqB;AAEnC,oBAAgBV,WAFmB;AAGnCW,IAAAA,MAAM,EAAEV,WAH2B;AAInCW,IAAAA,GAAG,EAAEV;AAJ8B,GAArC;AAOA,SAAOH,MAAP;AACD,CAbL,EAcIc,KAAK,IAAIC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAdb;AAiBA;;;;;AAIA3B,KAAK,CAACU,YAAN,CAAmBoB,QAAnB,CAA4BlB,GAA5B,CACIkB,QAAQ,IAAI;AACV,QAAMhB,WAAW,GAAGgB,QAAQ,CAACP,OAAT,CAAiB,cAAjB,CAApB;AACA,QAAMR,WAAW,GAAGe,QAAQ,CAACP,OAAT,CAAiB,QAAjB,CAApB;AACA,QAAMP,SAAS,GAAGc,QAAQ,CAACP,OAAT,CAAiB,KAAjB,CAAlB;;AAEA,MAAIT,WAAJ,EAAiB;AACfK,IAAAA,YAAY,CAACY,OAAb,CACIxB,iBADJ,EAEIU,IAAI,CAACe,SAAL,CAAe;AAAElB,MAAAA,WAAF;AAAeC,MAAAA,WAAf;AAA4BC,MAAAA;AAA5B,KAAf,CAFJ;AAID;;AACD,SAAOc,QAAP;AACD,CAbL,EAcIH,KAAK,IAAIC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAdb;AAiBA;;;;;;;;;;AASA,OAAO,MAAMM,UAAU,GAAG,OAAO;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAM,GAAG,KAAjB;AAAwBC,EAAAA,IAAxB;AAA8Bb,EAAAA,OAAO,GAAG;AAAxC,CAAP,KAAwD;AAChF,MAAI;AACFlB,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,UAAM6B,QAAQ,GAAG,MAAM9B,KAAK,CAAC;AAC3BqC,MAAAA,GAAG,EAAEpC,OAAO,GAAGiC,IADY;AAE3BC,MAAAA,MAF2B;AAG3BC,MAAAA,IAAI,EAAEA,IAAI,IAAI,EAHa;AAI3Bb,MAAAA,OAAO,EAAEF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,eAAlB,EAAmCc,OAAnC;AAJkB,KAAD,CAA5B;AAMA,WAAOO,QAAP;AACD,GATD,CASE,OAAOH,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAbM","sourcesContent":["import axios from \"axios\";\n\n\n// grab the api url from env variables\nconst API_URL = `${process.env.REACT_APP_API_URL}`;\nconsole.log(API_URL)\nconst LOCAL_STORAGE_KEY = `${process.env.REACT_APP_STORAGE_KEY}`\n\n// we communicate with JSON\nconst DEFAULT_HEADERS = {\n  \"content-type\": \"application/json\"\n};\n\n// on each request we need to send auth headers\naxios.interceptors.request.use(\n    config => {\n      const { accessToken, clientToken, userToken } =\n      JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || {};\n\n      Object.assign(config.headers.common, {\n        \"token-type\": \"Bearer\",\n        \"access-token\": accessToken,\n        client: clientToken,\n        uid: userToken\n      });\n\n      return config;\n    },\n    error => Promise.reject(error)\n);\n\n/**\n * on each response we need to grab the auth headers\n * and persist it to a local storage\n */\naxios.interceptors.response.use(\n    response => {\n      const accessToken = response.headers[\"access-token\"];\n      const clientToken = response.headers[\"client\"];\n      const userToken = response.headers[\"uid\"];\n\n      if (accessToken) {\n        localStorage.setItem(\n            LOCAL_STORAGE_KEY,\n            JSON.stringify({ accessToken, clientToken, userToken })\n        );\n      }\n      return response;\n    },\n    error => Promise.reject(error)\n);\n\n/**\n *  helper method to perform an api requests\n *\n * @param path\n * @param method\n * @param data\n * @param headers\n * @returns {Promise<*>}\n */\nexport const apiRequest = async ({ path, method = \"GET\", data, headers = {} }) => {\n  try {\n    console.log(API_URL)\n    const response = await axios({\n      url: API_URL + path,\n      method,\n      data: data || {},\n      headers: Object.assign({}, DEFAULT_HEADERS, headers),\n    });\n    return response;\n  } catch (error) {\n    return error;\n  }\n};"]},"metadata":{},"sourceType":"module"}